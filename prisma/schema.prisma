// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  email                String     @unique
  password             String
  firstName            String
  lastName             String
  phone                String?
  role                 UserRole   @default(HOTEL)
  status               UserStatus @default(PENDING)
  isDeleted            Boolean    @default(false)
  profileImage         String?
  profileImagePublicId String? // Cloudinary public_id for profile image
  lastLogin            DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  isPasswordChanged    Boolean    @default(false)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relations
  notifications        Notification[]
  supportRequests      SupportRequest[]
  announcements        Announcement[]
  hotel                Hotels?     // If user is a hotel owner
  adminEscalations     AdminEscalation[] // Escalations from this user

  @@map("users")
}

model Hotels {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String   @unique // Unique slug for hotel access
  description       String?
  address           String?
  city              String?
  country           String?
  phone             String?
  email             String?
  website           String?
  logo              String?
  logoPublicId      String? // Cloudinary public_id
  isActive          Boolean  @default(true)
  subscriptionId    String? // Stripe subscription ID
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  trialEndsAt       DateTime?
  subscriptionEndsAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ownerId           String   @unique @db.ObjectId
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  feedbackForms     FeedbackForm[]
  reviews           Review[]
  qrCodes           QRCode[]
  analytics         HotelAnalytics[]

  @@map("hotels")
}

model FeedbackForm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(true)
  layout      String   @default("basic") // basic, good, excellent
  hotelId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hotel       Hotels           @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  questions   FormQuestion[]
  reviews     Review[]
  qrCodes     QRCode[]

  @@map("feedback_forms")
}

model FormQuestion {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  formId        String           @db.ObjectId
  question      String
  type          QuestionType
  isRequired    Boolean          @default(true)
  order         Int
  options       String[]         @default([]) // For multiple choice questions
  validation    String?          // JSON string for validation rules
  isDefault     Boolean          @default(false) // Mark default questions that can't be edited/deleted
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  form          FeedbackForm     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       QuestionAnswer[]

  @@map("form_questions")
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId       String   @db.ObjectId
  formId        String   @db.ObjectId
  guestName     String?
  guestEmail    String?
  guestPhone    String?
  overallRating Int      // 1-5 stars
  isPublic      Boolean  @default(false) // 4-5 stars can be made public
  isShared      Boolean  @default(false) // Whether shared on Google/TripAdvisor
  status        ReviewStatus @default(PENDING)
  submittedAt   DateTime @default(now())
  publishedAt   DateTime?

  // Relations
  hotel         Hotels            @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  form          FeedbackForm     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers       QuestionAnswer[]

  @@map("reviews")
}

model QuestionAnswer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId   String   @db.ObjectId
  questionId String   @db.ObjectId
  answer     String   // JSON string for different answer types
  createdAt  DateTime @default(now())

  // Relations
  review     Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  question   FormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_answers")
}

model QRCode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String   @db.ObjectId
  formId      String?  @db.ObjectId
  code        String   @unique // QR code identifier
  url         String   // Full URL for the QR code
  isActive    Boolean  @default(true)
  scanCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hotel       Hotels         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  form        FeedbackForm? @relation(fields: [formId], references: [id], onDelete: SetNull)

  @@map("qr_codes")
}

model HotelAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId         String   @db.ObjectId
  date            DateTime
  totalReviews    Int      @default(0)
  averageRating   Float    @default(0)
  positiveReviews Int      @default(0) // 4-5 stars
  negativeReviews Int      @default(0) // 1-3 stars
  responseRate    Float    @default(0)
  createdAt       DateTime @default(now())

  // Relations
  hotel           Hotels   @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_analytics")
}

model AdminEscalation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  hotelId     String?  @db.ObjectId
  subject     String
  message     String
  status      EscalationStatus @default(OPEN)
  priority    Priority @default(MEDIUM)
  adminResponse String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_escalations")
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  isArchived Boolean          @default(false)
  relatedId  String?          // ID of related entity (message, event, etc.)
  relatedType String?         // Type of related entity
  metadata   String?          // JSON string for additional data
  createdAt  DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SupportRequest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  subject       String
  message       String
  status        SupportStatus @default(OPEN)
  priority      Priority      @default(MEDIUM)
  adminResponse String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_requests")
}

model Announcement {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  type        AnnouncementType
  status      AnnouncementStatus @default(PUBLISHED)
  createdById String             @db.ObjectId
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model SystemSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  siteName            String
  siteDescription     String?
  contactEmail        String
  enableNotifications Boolean  @default(true)
  stripePublicKey     String?
  stripeSecretKey     String?
  sendgridApiKey      String?
  pusherAppId         String?
  pusherKey           String?
  pusherSecret        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum UserRole {
  ADMIN
  HOTEL
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  STAR_RATING
  MULTIPLE_CHOICE_SINGLE
  MULTIPLE_CHOICE_MULTIPLE
  YES_NO
  FILE_UPLOAD
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
}

enum EscalationStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  NEW_REVIEW
  REVIEW_APPROVED
  REVIEW_REJECTED
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_CANCELLED
  ESCALATION_RECEIVED
  ESCALATION_RESPONDED
  SYSTEM_ALERT
  NEW_HOTEL_REGISTRATION
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AnnouncementType {
  GENERAL
  IMPORTANT
  URGENT
  EVENT
  UPDATE
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TargetAudience {
  ALL
  HOTELS
  ADMINS
  NEW_HOTELS
}