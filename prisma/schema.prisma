// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  HOTEL_ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  SHARED_EXTERNALLY
}

enum FormFieldType {
  TEXT
  TEXTAREA
  RATING
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  EMAIL
  PHONE
  FILE_UPLOAD
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  hotelId   String?  @db.ObjectId
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  
  // Password reset
  resetToken         String?
  resetTokenExpiry   DateTime?
  
  // Relations
  notifications Notification[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Hotel {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  slug              String             @unique
  email             String             @unique
  phone             String?
  address           String
  city              String
  state             String
  country           String
  zipCode           String?
  website           String?
  googleReviewUrl   String?  // Google Reviews URL for the hotel
  description       String?
  logo              String?
  primaryColor      String             @default("#3B82F6")
  secondaryColor    String             @default("#1E40AF")
  
  // Subscription
  subscriptionId    String?            @unique
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  subscriptionPlan  String?           // basic, premium, enterprise
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  
  // Settings
  isActive          Boolean            @default(true)
  allowExternalSharing Boolean         @default(true)
  autoApproveReviews Boolean          @default(false)
  
  // Relations
  users             User[]
  reviews           Review[]
  forms             Form[]
  qrCodes           QRCode[]
  subscription      Subscription?
  supportMessages   SupportMessage[]
  refunds           Refund[]
  suspensions       HotelSuspension[]
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("hotels")
}

model Form {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String       @db.ObjectId
  hotel       Hotel        @relation(fields: [hotelId], references: [id])
  name        String
  description String?
  isActive    Boolean      @default(true)
  isDefault   Boolean      @default(false)
  fields      FormField[]
  reviews     Review[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("forms")
}

model FormField {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  formId      String         @db.ObjectId
  form        Form           @relation(fields: [formId], references: [id])
  label       String
  type        FormFieldType
  required    Boolean        @default(false)
  placeholder String?
  options     String[]       // For multiple choice fields
  order       Int            @default(0)
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("form_fields")
}

model Review {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String       @db.ObjectId
  hotel       Hotel        @relation(fields: [hotelId], references: [id])
  formId      String       @db.ObjectId
  form        Form         @relation(fields: [formId], references: [id])
  
  // Guest info
  guestName   String?
  guestEmail  String?
  guestPhone  String?
  
  // Review content
  responses   Json         // Store form responses as JSON
  overallRating Int?       // Overall rating if applicable
  status      ReviewStatus @default(PENDING)
  
  // External sharing
  sharedOnGoogle Boolean   @default(false)
  sharedOnTripAdvisor Boolean @default(false)
  externalUrls Json?       // Store external review URLs
  
  // Admin actions
  adminNotes  String?
  adminId     String?      @db.ObjectId
  
  // Media files
  mediaFiles  MediaFile[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("reviews")
}

model QRCode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String   @db.ObjectId
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  name        String
  description String?
  url         String   @unique
  imageUrl    String?  // Generated QR code image
  isActive    Boolean  @default(true)
  scanCount   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("qr_codes")
}

model Subscription {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  hotelId           String             @unique @db.ObjectId
  hotel             Hotel              @relation(fields: [hotelId], references: [id])
  stripeCustomerId  String             @unique
  stripeSubscriptionId String?        @unique
  plan              String             // basic, premium, enterprise
  status            SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean            @default(false)
  
  // Relations
  refunds           Refund[]
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("subscriptions")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   // info, warning, success, error
  isRead    Boolean  @default(false)
  data      Json?    // Additional data
  
  createdAt DateTime @default(now())

  @@map("notifications")
}

model MediaFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewId  String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  fileName  String
  fileUrl   String
  fileType  String   // image, video
  fileSize  Int      // in bytes
  mimeType  String
  
  createdAt DateTime @default(now())

  @@map("media_files")
}

model SupportMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String   @db.ObjectId
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  subject     String
  category    String   // general, technical, billing, feature, bug, account, other
  message     String
  priority    String   // low, medium, high, urgent
  status      String   // pending, in_progress, resolved, closed
  hotelName   String
  hotelEmail  String
  hotelPhone  String?
  
  // Admin response
  adminResponse String?
  adminId       String? @db.ObjectId
  respondedAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("support_messages")
}

model Refund {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId         String   @db.ObjectId
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  subscriptionId  String?  @db.ObjectId
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  
  // Refund details
  amount          Float    // Amount to refund in dollars
  reason          String   // Reason for refund
  status          String   // pending, processing, completed, failed, cancelled
  stripeRefundId  String?  // Stripe refund ID
  
  // Admin details
  processedBy     String?  @db.ObjectId // Super admin who processed
  processedAt     DateTime?
  notes           String?  // Additional notes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("refunds")
}

model HotelSuspension {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId     String   @db.ObjectId
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  
  // Suspension details
  reason      String   // Reason for suspension
  type        String   // temporary, permanent, payment_issue, violation, etc.
  status      String   // active, lifted, expired
  duration    Int?     // Duration in days (for temporary suspensions)
  
  // Dates
  suspendedAt DateTime @default(now())
  expiresAt   DateTime?
  liftedAt    DateTime?
  
  // Admin details
  suspendedBy String   @db.ObjectId // Super admin who suspended
  liftedBy    String?  @db.ObjectId // Super admin who lifted suspension
  notes       String?  // Additional notes
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotel_suspensions")
}

model SystemSettings {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
